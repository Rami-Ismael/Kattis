import java.io.*;
import java.util.*;
public class Main {
    static PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static String line;
    static  int n,k,T,N,m,Q,q,t;
    static StringTokenizer st;
    static Scanner in = new Scanner(System.in);
    static char [] word;
    static int []arr = new int[16];
    public static void main(String[] args) throws IOException {
        T = Integer.parseInt(br.readLine());
        while (T-->0){
            BitSet set = new BitSet(10000);
            st = new StringTokenizer(br.readLine());
            n = Integer.parseInt(st.nextToken());
            t = Integer.parseInt(st.nextToken());
            Queue<IP> queue = new LinkedList<>();
            queue.add(new IP(0,0));
            st = new StringTokenizer(br.readLine());
            IP notPossible = new IP(Integer.MAX_VALUE,0);
            for (int i=0;i<n;i++)
                arr[i] = Integer.parseInt(st.nextToken());
            while (!queue.isEmpty()&&queue.peek().val!=t){
                IP u = queue.poll();
                for (int i=0;i<n;i++){
                    int value = u.val+arr[i];
                    if (value<0)
                        value = 0;
                    if (value>3600)
                        value = 3600;
                    IP v = new IP(value,(u.distance+1));
                    if (!set.get(v.val)){
                        if (v.val>t&&v.val<notPossible.val){
                            notPossible.val = v.val;
                            notPossible.distance = v.distance;
                        }else if (v.val>t&&v.val==notPossible.val&&v.distance<notPossible.distance){
                            notPossible.distance = v.distance;
                        }
                        set.set(v.val,true);
                        queue.add(v);
                    }
                }
            }
            if (queue.size()!=0){
                pw.println(queue.peek().distance+" "+0);
            }else{
                pw.println(notPossible.distance+" "+(notPossible.val-t));
            }
        }
        pw.flush();

    }
    public static class IP{
        int val;
        int distance ;

        public IP(int val, int distance) {
            this.val = val;
            this.distance = distance;
        }
    }
}
