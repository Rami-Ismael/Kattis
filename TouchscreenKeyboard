  int t = in.nextInt();
       char [][] grid =new char [3][10];
       grid[0] = "qwertyuiop".toCharArray();
       grid[1] = "asdfghjkl ".toCharArray();
       grid[2]  ="zxcvbnm   ".toCharArray();
        int [][] dis = new int[26][26];
        for(int i=0;i<26;i++){
            Arrays.fill(dis[i], -1);
        }
        while(t-->0){
            String string = in.next();
            int l = in.nextInt();
            IP [] ip = new IP[l];
            for(int i=0;i<l;i++){
                int sum=0;
                String type = in.next();
                for(int j=0;j<type.length();j++){
                int [] S = find(string.charAt(j), grid);
                int [] G = find(type.charAt(j), grid);
                int dx = Math.abs(S[0]-G[0]);
                int dy = Math.abs(S[1]-G[1]);
                sum+=dx+dy;
                }
                ip[i] = new IP(sum,type);
            }
            Arrays.sort(ip);
            for(int i=0;i<l;i++){
                System.out.println(ip[i].second+" "+ip[i].first);
            }
        }
        static class IP implements Comparable<IP>{
        public int first;
        public String second;
        IP(int first, String  second){
            this.first = first;
            this.second = second;
        }
        public int compareTo(IP ip){
            if(first==ip.first)
                return second.compareTo(ip.second);
            return first-ip.first;    
        }
 
    }
        
       private static int[] find(char goal, char[][] grid) {
        int [] temp = new int[2];
        for(int i=0;i<3;i++){
            for(int j=0;j<10;j++){
                if(grid[i][j]==goal){
                    temp[0] = i;
                    temp[1] =j;
                    return temp;
                }
            }
        }
        return null;
    }
